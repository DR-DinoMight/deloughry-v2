---
import type { CollectionEntry } from "astro:content";

import BaseLayout from "./Base.astro";
import { getTagSlug, formatTagForDisplay } from "@/utils";

interface Props {
	post: CollectionEntry<"post">;
}

const { post } = Astro.props;
const {
	data: { title, description, ogImage, publishDate },
	slug,
} = post;
const socialImage = ogImage ?? `/og-image/${slug}.png`;
const articleDate = publishDate.toISOString();
const { headings } = await post.render();
---

<script>
	const scrollBtn = document.getElementById("to-top-btn") as HTMLButtonElement;
	const targetHeader = document.getElementById("blog-hero") as HTMLDivElement;

	function callback(entries: IntersectionObserverEntry[]) {
		entries.forEach((entry) => {
			// only show the scroll to top button when the heading is out of view
			scrollBtn.dataset.show = (!entry.isIntersecting).toString();
		});
	}

	scrollBtn.addEventListener("click", () => {
		document.documentElement.scrollTo({ top: 0, behavior: "smooth" });
	});

	const observer = new IntersectionObserver(callback);
	observer.observe(targetHeader);
</script>

<BaseLayout meta={{ title, description, articleDate, ogImage: socialImage }}>
	<article class="blog-post h-entry">
		<header class="blog-post-header">
			{ogImage && (
				<div class="blog-post-image">
					<img src={ogImage} alt={title} />
				</div>
			)}
			<div class="blog-post-meta">
				<time datetime={articleDate} class="blog-post-date">
					{new Date(publishDate).toLocaleDateString('en-GB', {
						year: 'numeric',
						month: 'long',
						day: 'numeric'
					})}
				</time>
				<h1 class="blog-post-title">{title}</h1>
				{post.data.tags && post.data.tags.length > 0 && (
					<div class="blog-post-tags">
						{post.data.tags.map((tag) => (
							<a href={`/tags/${getTagSlug(tag)}`} class="tag" title={`View posts with tag: ${formatTagForDisplay(tag)}`}>
								{formatTagForDisplay(tag)}
							</a>
						))}
					</div>
				)}
				{description && <p class="blog-post-description">{description}</p>}
			</div>
		</header>

		<div class="blog-post-content">
			<div class="blog-post-body">
				<div
					class="prose prose-lg prose-cactus w-full max-w-none prose-headings:font-semibold prose-headings:before:flex-row prose-heading:before:mr-4 prose-headings:before:text-accent prose-headings:before:content-['#'] prose-th:before:content-none"
				>
					<slot />
				</div>
			</div>

			<aside class="blog-post-toc">
				<h2 class="toc-title">Table of Contents</h2>
				<ul class="toc-list">
					{
						headings.flatMap(({ slug, text }) => (
							<li class="toc-item">
								<a href={`#${slug}`} aria-label={`Scroll to section: ${text}`}>
									{text}
								</a>
							</li>
						))
					}
				</ul>
			</aside>
		</div>
	</article>

	<button
		id="to-top-btn"
		class="scroll-to-top"
		aria-label="Back to Top"
		data-show="false"
	>
		<svg
			xmlns="http://www.w3.org/2000/svg"
			aria-hidden="true"
			focusable="false"
			fill="none"
			viewBox="0 0 24 24"
			stroke-width="2"
			stroke="currentColor"
			class="h-6 w-6"
		>
			<path stroke-linecap="round" stroke-linejoin="round" d="M4.5 15.75l7.5-7.5 7.5 7.5"></path>
		</svg>
	</button>

	<style>
		.blog-post {
			max-width: 1000px;
			margin: 0 auto;
			padding: 2rem;
			background: var(--theme-bg);
			border-radius: 8px;
			box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
			font-family: 'Roboto', sans-serif;
			line-height: 1.6;
		}

		.blog-post-header {
			text-align: center;
			margin-bottom: 3rem;
			padding-bottom: 2rem;
			border-bottom: 2px solid var(--theme-accent);
			position: relative;
		}

		.blog-post-image {
			margin: -2rem -2rem 2rem -2rem;
			width: calc(100% + 4rem);
			position: relative;
			overflow: hidden;
			border-top-left-radius: 8px;
			border-top-right-radius: 8px;
		}

		.blog-post-image img {
			width: 100%;
			height: 400px;
			object-fit: cover;
			border-radius: 0;
			box-shadow: none;
			filter: grayscale(100%);
			transition: filter 0.3s ease;
		}

		.blog-post-image:hover img {
			filter: grayscale(0%);
		}

		.blog-post-image::after {
			content: '';
			position: absolute;
			bottom: 0;
			left: 0;
			right: 0;
			height: 200px;
			background: linear-gradient(transparent 0%, rgba(255, 255, 255, 0.1) 30%, var(--theme-bg) 100%);
			pointer-events: none;
		}

		/* Only apply image overlay positioning when there's an image */
		.blog-post:has(.blog-post-image) .blog-post-meta {
			z-index: 2;
			margin-top: -200px;
			padding-top: 200px;
		}

		.blog-post-meta {
			position: relative;
		}

		.blog-post-date {
			display: block;
			font-size: 1rem;
			color: var(--theme-accent);
			font-weight: 600;
			margin-bottom: 1rem;
			font-family: 'Oswald', sans-serif;
			text-transform: uppercase;
			letter-spacing: 1px;
		}

		.blog-post-title {
			font-size: 2.5rem;
			font-weight: 700;
			margin-bottom: 1rem;
			color: var(--theme-text);
			font-family: 'Oswald', sans-serif;
			text-transform: uppercase;
			letter-spacing: 1px;
		}

		.blog-post-tags {
			display: flex;
			flex-wrap: wrap;
			justify-content: center;
			gap: 0.5rem;
			margin-bottom: 1rem;
		}

		.tag {
			background: var(--theme-accent);
			color: white;
			padding: 0.25rem 0.75rem;
			border-radius: 20px;
			font-size: 0.9rem;
			font-weight: 500;
			text-decoration: none;
			transition: background-color 0.3s ease, transform 0.2s ease;
		}

		.tag:hover {
			background: var(--theme-accent-dark, #1a4d3a);
			transform: translateY(-1px);
		}

		.blog-post-description {
			font-size: 1.2rem;
			color: var(--theme-quote);
			font-style: italic;
			margin: 0;
		}

		.blog-post-content {
			display: grid;
			grid-template-columns: 1fr 300px;
			gap: 3rem;
		}

		.blog-post-body {
			min-width: 0;
		}

		.blog-post-toc {
			position: sticky;
			top: 2rem;
			height: fit-content;
		}

		.toc-title {
			font-size: 1.2rem;
			font-weight: 600;
			margin-bottom: 1rem;
			color: var(--theme-accent);
			font-family: 'Oswald', sans-serif;
			text-transform: uppercase;
			letter-spacing: 0.5px;
		}

		.toc-list {
			list-style: none;
			padding: 0;
			margin: 0;
		}

		.toc-item {
			margin-bottom: 0.5rem;
		}

		.toc-item a {
			display: block;
			padding: 0.5rem;
			color: var(--theme-text);
			text-decoration: none;
			border-radius: 4px;
			transition: all 0.3s ease;
			font-size: 0.9rem;
			font-weight: 500;
		}

		.toc-item a:hover {
			background: rgba(175, 180, 200, 0.1);
			color: var(--theme-accent);
		}

		.scroll-to-top {
			position: fixed;
			bottom: 2rem;
			right: 2rem;
			width: 3rem;
			height: 3rem;
			background: var(--theme-accent);
			color: white;
			border: none;
			border-radius: 50%;
			cursor: pointer;
			display: flex;
			align-items: center;
			justify-content: center;
			opacity: 0;
			transform: translateY(100px);
			transition: all 0.3s ease;
			z-index: 100;
		}

		.scroll-to-top[data-show="true"] {
			opacity: 1;
			transform: translateY(0);
		}

		.scroll-to-top:hover {
			background: var(--theme-accent-hover);
			transform: scale(1.1);
		}

		@media (max-width: 1024px) {
			.blog-post-content {
				grid-template-columns: 1fr;
				gap: 2rem;
			}

			.blog-post-toc {
				position: static;
			}
		}

		@media (max-width: 768px) {
			.blog-post {
				padding: 1rem;
			}

			.blog-post-title {
				font-size: 2rem;
			}

			.blog-post-image {
				margin: -1rem -1rem 2rem -1rem;
				width: calc(100% + 2rem);
			}

			.blog-post-image img {
				height: 250px;
			}
		}
	</style>
</BaseLayout>
