---
import BookmarkCategory from "@/components/BookmarkCategory";
import PageLayout from "@/layouts/Base";
import { ogFetcher } from "@/lib/ogFetchers";

const bookmarks = await (await fetch(import.meta.env.API_URL +'/bookmarks')).json();

const meta = {
  title: "Bookmarks",
  description: "A collection of bookmarks I find interesting",
};

// foreach bookmark get the url go get the opengraph data

const bookmarksWithMetadata =  await Promise.all(
  bookmarks.map(async bookmark => {
    const results = await ogFetcher(bookmark['link']);
    return {
      ...bookmark,
      metadata: results,
    }
}));

//split bookmarks into arrays grouped by categories ('useful','fun','affliate')
const usefulBookmarks = bookmarksWithMetadata.filter(bookmark => bookmark.category === 'useful');
const funBookmarks = bookmarksWithMetadata.filter(bookmark => bookmark.category === 'fun');
const affiliateBookmarks = bookmarksWithMetadata.filter(bookmark => bookmark.category === 'affiliate');

export const prerender = true
---
<script>
	const scrollBtn = document.getElementById("to-top-btn") as HTMLButtonElement;
	const targetHeader = document.getElementById("heading") as HTMLDivElement;

	function callback(entries: IntersectionObserverEntry[]) {
		entries.forEach((entry) => {
			// only show the scroll to top button when the heading is out of view
			scrollBtn.dataset.show = (!entry.isIntersecting).toString();
		});
	}

	scrollBtn.addEventListener("click", () => {
		document.documentElement.scrollTo({ top: 0, behavior: "smooth" });
	});

	const observer = new IntersectionObserver(callback);
	observer.observe(targetHeader);
</script>
<PageLayout meta={meta}>
  <div class="sm:grid sm:grid-flow-col sm:grid-cols-[5fr] sm:items-start sm:gap-x-10">
    <article class="h-entry break-words">
      <h1 class="title mb-8 sm:mb-6" id="heading">Bookmarks I find fun, useful, or just more people need to see...</h1>
      {usefulBookmarks && (<BookmarkCategory title="Useful" bookmarks={usefulBookmarks} />)}
      {funBookmarks.length > 0 && (<BookmarkCategory title="Fun" bookmarks={funBookmarks} />)}
      {affiliateBookmarks.length > 0 && (<BookmarkCategory title="Affiliate" bookmarks={affiliateBookmarks} />)}
    </article>
    <aside class="hidden text-right sm:sticky sm:top-20 sm:block">
			<h2 class="font-semibold">Table of Contents</h2>
			<ul class="mt-4 space-y-5 text-xs">
				{
          <li class="line-clamp-2 text-accent hover:text-link font-oswald font-bold uppercase">
            <a href="#useful" aria-label={`Scroll to section: useful`}>
              # useful
            </a>
          </li>
				}
			</ul>
		</aside>
  </div>
  <button
  id="to-top-btn"
  class="z-90 fixed bottom-8 right-4 flex h-10 w-10 translate-y-28 items-center justify-center rounded-full border-2 border-transparent bg-zinc-200 text-3xl opacity-0 transition-all duration-300 hover:border-zinc-400 data-[show=true]:translate-y-0 data-[show=true]:opacity-100 dark:bg-zinc-700 sm:right-8 sm:h-12 sm:w-12"
  aria-label="Back to Top"
  data-show="false"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      aria-hidden="true"
      focusable="false"
      fill="none"
      viewBox="0 0 24 24"
      stroke-width="2"
      stroke="currentColor"
      class="h-6 w-6"
    >
      <path stroke-linecap="round" stroke-linejoin="round" d="M4.5 15.75l7.5-7.5 7.5 7.5"></path>
    </svg>
  </button>
</PageLayout>
