---
import type { Page, GetStaticPathsOptions } from "astro";
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";
import PageLayout from "@/layouts/Base";
import Pagination from "@/components/Paginator";
import { getUniqueTags, sortMDByDate, getFormattedDate, getTagSlug, formatTagForDisplay } from "@/utils";

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
	const allPosts = await getCollection("post");
	const allPostsByDate = sortMDByDate(allPosts);
	const uniqueTags = getUniqueTags(allPosts);
	return paginate(allPostsByDate, { props: { uniqueTags }, pageSize: 10 });
}

interface Props {
	page: Page<CollectionEntry<"post">>;
	uniqueTags: string[];
}

const { page } = Astro.props;

const meta = {
	title: "Posts",
	description: "A collection of posts by me!",
};

const paginationProps = {
	...(page.url.prev && {
		prevUrl: {
			url: page.url.prev,
			text: `← Previous Posts`,
		},
	}),
	...(page.url.next && {
		nextUrl: {
			url: page.url.next,
			text: `Next Posts →`,
		},
	}),
};
export const prerender = true;
---

<PageLayout meta={meta}>
	<div class="posts-listing">
		<header class="posts-header">
			<h1 class="posts-title">Posts</h1>
			<p class="posts-subtitle">Thoughts, tutorials, and insights on web development and technology</p>
		</header>

		<div class="posts-grid">
			{page.data.map((p) => (
				<article class="post-card">
					{p.data.ogImage && (
						<div class="post-card-image">
							<img src={p.data.ogImage} alt={p.data.title} />
						</div>
					)}
					<div class="post-card-content">
						<time datetime={p.data.publishDate.toISOString()} class="post-card-date">
							{getFormattedDate(new Date(p.data.publishDate), { month: "short" })}
						</time>
						<h2 class="post-card-title">
							<a href={`/posts/${p.slug}/`}>{p.data.title}</a>
						</h2>
						{p.data.description && <p class="post-card-description">{p.data.description}</p>}
						{p.data.tags && p.data.tags.length > 0 && (
							<div class="post-card-tags">
								{p.data.tags.map((tag) => (
									<a href={`/tags/${getTagSlug(tag)}`} class="tag" title={`View posts with tag: ${formatTagForDisplay(tag)}`}>
										{formatTagForDisplay(tag)}
									</a>
								))}
							</div>
						)}
					</div>
				</article>
			))}
		</div>

		<Pagination {...paginationProps} />
	</div>

	<style>
		.posts-listing {
			max-width: 1200px;
			margin: 0 auto;
			padding: 2rem;
		}

		.posts-header {
			text-align: center;
			margin-bottom: 3rem;
		}

		.posts-title {
			font-size: 3rem;
			font-weight: 700;
			margin-bottom: 1rem;
			color: var(--theme-text);
			font-family: 'Oswald', sans-serif;
			text-transform: uppercase;
			letter-spacing: 1px;
		}

		.posts-subtitle {
			font-size: 1.2rem;
			color: var(--theme-quote);
			font-style: italic;
		}

		.posts-grid {
			display: grid;
			grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
			gap: 2rem;
			margin-bottom: 3rem;
		}

		.post-card {
			background: var(--theme-bg);
			border-radius: 12px;
			overflow: hidden;
			box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
			transition: transform 0.3s ease, box-shadow 0.3s ease;
		}

		.post-card:hover {
			transform: translateY(-4px);
			box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
		}

		.post-card-image {
			position: relative;
			overflow: hidden;
			height: 200px;
		}

		.post-card-image img {
			width: 100%;
			height: 100%;
			object-fit: cover;
			filter: grayscale(100%);
			transition: filter 0.3s ease;
		}

		.post-card:hover .post-card-image img {
			filter: grayscale(0%);
		}

		.post-card-content {
			padding: 1.5rem;
		}

		.post-card-date {
			display: block;
			font-size: 0.9rem;
			color: var(--theme-accent);
			font-weight: 600;
			margin-bottom: 0.5rem;
		}

		.post-card-title {
			margin: 0 0 0.75rem 0;
			font-size: 1.5rem;
			font-weight: 600;
			font-family: 'Oswald', sans-serif;
			text-transform: uppercase;
			letter-spacing: 0.5px;
		}

		.post-card-title a {
			color: var(--theme-text);
			text-decoration: none;
			transition: color 0.3s ease;
		}

		.post-card-title a:hover {
			color: var(--theme-accent);
		}

		.post-card-description {
			margin: 0 0 1rem 0;
			color: var(--theme-quote);
			font-style: italic;
			line-height: 1.5;
		}

		.post-card-tags {
			display: flex;
			flex-wrap: wrap;
			gap: 0.5rem;
		}

		.tag {
			background: var(--theme-accent);
			color: white;
			padding: 0.25rem 0.75rem;
			border-radius: 20px;
			font-size: 0.9rem;
			font-weight: 500;
			text-decoration: none;
			transition: background-color 0.3s ease, transform 0.2s ease;
		}

		.tag:hover {
			background: var(--theme-accent-dark, #1a4d3a);
			transform: translateY(-1px);
		}

		@media (max-width: 768px) {
			.posts-listing {
				padding: 1rem;
			}

			.posts-title {
				font-size: 2rem;
			}

			.posts-grid {
				grid-template-columns: 1fr;
				gap: 1.5rem;
			}
		}
	</style>
</PageLayout>
