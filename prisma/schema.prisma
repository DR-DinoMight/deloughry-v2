// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgres"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model AuthUser {
  id           String        @id @unique
  auth_session AuthSession[]
  auth_key     AuthKey[]
  // here you can add custom fields for your user
  // e.g. name, email, username, roles, etc.
  name         String?
  email        String        @unique
}

model AuthSession {
  id             String   @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  auth_user      AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model AuthKey {
  id              String   @id @unique
  hashed_password String?
  user_id         String
  primary_key     Boolean
  expires         BigInt?
  auth_user       AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Track {
  id          String    @id
  name        String
  artwork     Artwork[]
  artists     Artist[]
  uri         String
  previewUrl  String?
  externalUrl String
  addedAt     DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())

  playlist   Playlist? @relation(fields: [playlistId], references: [id])
  playlistId String?

  @@index([playlistId])
}

model Artwork {
  id         String    @id
  url        String
  height     Int
  width      Int
  track      Track?    @relation(fields: [trackId], references: [id])
  trackId    String?
  playlist   Playlist? @relation(fields: [playlistId], references: [id])
  playlistId String?

  @@index([trackId])
  @@index([playlistId])
}

model Playlist {
  id          String    @id
  name        String
  description String
  tracks      Track[]
  spotifyUri  String
  externalUrl String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  addedAt     DateTime  @default(now())
  artwork     Artwork[]
}

model Artist {
  id   String @id
  name String

  tracks Track[]
}

model HealthData {
  id        String      @id @default(uuid()) @db.Uuid
  date      DateTime    @default(now())
  datapoint Datapoint[]
}

model Datapoint {
  id           String         @id @default(uuid()) @db.Uuid
  type         DatapointTypes
  value        Float
  unit         String
  healthData   HealthData?    @relation(fields: [healthDataId], references: [id], onDelete: Cascade)
  healthDataId String?

  @@index([healthDataId])
}

enum DatapointTypes {
  STEPS
  DISTANCE
  HEART_RATE
  BLOOD_PRESSURE
  SLEEP
  WEIGHT
  BODY_FAT
}
